<!DOCTYPE html>
<html lang="en" dir="ltr" xmlns="http://www.w3.org/1999/xhtml" xmlns:w="tag:fullstack.wiki,2018:ns/">
	<head>
		<meta charset="UTF-8" />
		<title>Caching in HTTP</title>
		<meta name="description" content="HTTP caching allows a client or server to re-use a previous response, for improving performance." />
		<link rel="up" href="index.xml" />
	</head>
	<body>
		<main>
			<h1>Caching</h1>
			<p>HTTP caching allows a client or server to re-use a previous response, with the benefit of improving performance.</p>
			<p>The process for setting if a response may be stored, when to re-use a stored response, and when to freshen a stored response with the origin server, is defined in <a href="https://www.rfc-editor.org/rfc/rfc9111.html">RFC 9111: HTTP Caching</a>.</p>

			<h2>HTTP Features</h2>
			<ul>
				<li><a href="headers/Cache-Control.xml">Cache-Control</a></li>
				<li><a href="headers/Expires.xml">Expires</a></li>
				<li><a href="headers/Age.xml">Age</a></li>
				<li><a href="headers/Vary.xml">Vary</a></li>
				<li><a href="status-codes/304.xml">304 Not Modified</a></li>
				<li><a href="headers/ETag.xml">ETag</a></li>
				<li><a href="headers/Last-Modified.xml">Last-Modified</a></li>
				<li><a href="headers/If-None-Match.xml">If-None-Match</a></li>
				<li><a href="headers/If-Modified-Since.xml">If-Modified-Since</a></li>
			</ul>

			<h2>Stages</h2>
			<p>There's several components to caching a response and determining if a previous, cached response may be reused:</p>

			<h3>Public/Shared Cache</h3>
			<p>A public cache (typically synonymous with a <i>shared cache</i>) stores responses that may be made anonymously, or are otherwise available to the public, and can be re-used for other users. It is typically implemented by CDNs (content delivery networks), caching proxies, caching gateways, and origin servers (for requests to dynamic pages, to avoid re-computing a response).</p>

			<h3>Private Cache</h3>
			<p>A private cache additionally allows user-agents to cache responses available only to a certain users, or that are not accessible by the general public. For example, a list of private messages for a single user that may be cached—but only by that user.</p>

			<h3>Freshing a Cached Response</h3>
			<p>Sometimes a client wants to check with the origin server to verify if a previous response may be re-used, and possibly to update metadata associated with it (especially the cache entry expiration date). This is called <i>freshing a response</i> and is implemented with <a href="conditional.xml">conditional requests</a>.</p>

			<h2>Common Caching Directives</h2>

			<p>This documents different suggested ways to configure caching-related headers. See the Implementations section for specifying this header in your particular environment.</p>

			<h3>Static, Unchanging Document</h3>
			<p>Use this if the resource is content-addressable (the filename is based on the contents of the file), or the contents of the file are not expected to change (e.g. changes are tracked by uploading a new document with a unique version number).</p>
			<pre type="message/http" w:space="indent">
				Cache-Control: max-age=31104000
			</pre>
			<p>This response allows a cache to store the response for about one year (31104000 seconds is 360 days).</p>

			<h3>Requiring revalidation</h3>
			<p>Use this if the resource has a modest possibility of changing, and you always want the user-agent to check if there's a newer version available. For example, a currently playing song, task being worked on, or other thing. "Infrequent" is relative to how often the resource is accessed—if a user checks the resource every few seconds, infrequent could mean every few minutes.</p>
			<pre type="message/http" w:space="indent">
				ETag: {etag}
				Last-Modified: {mtime}
				Cache-Control: max-age=0
			</pre>
			<p><code>max-age=0</code> forces a stored response to always be considered "stale". This will cause the cache to send a conditional request to the origin server to check if the resource has changed; if it has not, the server will respond with <a href="status-codes/304.xml">304 (Not Modified)</a>, and the stored response will be re-used.</p>
			<p>The <code>{etag}</code> and <code>{mtime}</code> placeholders must be filled with a unique value that changes whenever the document does. Most HTTP servers automatically do this when serving files off the filesystem. See <a href="conditional.xml">conditional requests</a> for more information.</p>

			<h3>Disabling storage</h3>
			<p>If the response contains private information that must not be stored, use the no-store directive:</p>
			<pre type="message/http" w:space="indent">
				Cache-Control: no-store
			</pre>
			<p>If it's OK for clients to store the response, consider using the "requiring revalidation" technique above instead.</p>

			<h3>Personalized document behind Cookie authorization</h3>
			<p>Use this if the resource is a personalized document that doesn't change very often, you may want to allow clients to cache the response. Use the <code>private</code> directive to ensure that it is not stored by a shared cache; and use <a href="headers/Vary.xml">Vary: Cookie</a> to ensure that the response is no longer served if the user logs out.</p>
			<pre type="message/http" w:space="indent">
				Cache-Control: private
				Vary: Cookie
			</pre>

			<h2>Implementations</h2>

			<h3>Local Private Caches</h3>
			<ul>
				<li>Firefox</li>
				<li>Chrome</li>
				<li>Safari</li>
			</ul>

			<h3>Public/Gateway/Server Cache</h3>
			<ul>
				<li><a href="https://httpd.apache.org/docs/current/caching.html">Apache httpd</a></li>
				<li>nginx</li>
				<li>Squid</li>
				<li>ATS (Apache Traffic Server)</li>
				<li>Varnish</li>
			</ul>

			<h3>CDN Cache services</h3>
			<ul>
				<li>Fastly</li>
				<li>Akamai</li>
				<li>AWS CloudFront</li>
				<li>Cloudflare</li>
			</ul>

			<h2>Configuring Caching Headers</h2>

			<h3>AWS S3</h3>
			<p>With aws-cli/2 accepts several arguments for setting cache-related headers on S3 objects, namely <code>--cache-control</code> and <code>--expires</code>. For example:</p>
			<pre w:space="indent">
				aws s3 sync &lt;src&gt; &lt;dst&gt; --cache-control "max-age=31104000"
				aws s3 cp &lt;src&gt; &lt;dst&gt; --cache-control "max-age=31104000"
			</pre>

			<h3>Apache httpd</h3>
			<p>Apache has extensive configuration options available for configuring caching options based on the type of document being served. See:</p>
			<ul>
				<li><a href="https://httpd.apache.org/docs/current/mod/mod_headers.html#header">mod_headers</a></li>
				<li><a href="https://httpd.apache.org/docs/current/mod/mod_expires.html">mod_expires</a></li>
			</ul>
			<p>An example directive with mod_headers and mod_expires:</p>
			<pre w:space="indent">
				Header merge Cache-Control "max-age=31104000"
			</pre>

			<h2>Configuring Cache Storage</h2>

			<h3>Nginx</h3>
			<p>Caches are configured separately in each module, for example, the <code>fastcgi_cache</code> and <code>proxy_cache</code> directives. (Note that what Nginx calls a "proxy" is actually a "gateway".)</p>

			<h3>Apache httpd</h3>
			<p>Apache has a single mechanism to cache responses from any inbound source, like requests forwarded to an origin server, a CGI script, or even resources from a slower filesystem (like spinning media or a network filesystem) when cached on a faster filesystem (like solid state media). See:</p>
			<ul>
				<li><a href="https://httpd.apache.org/docs/2.4/caching.html">httpd Caching Guide</a></li>
				<li><a href="https://httpd.apache.org/docs/2.4/mod/mod_cache.html">mod_cache</a></li>
			</ul>

			<h2>History</h2>
			<ol>
				<li>1999-06: Published in <a href="https://www.rfc-editor.org/rfc/rfc2616.html">RFC 2616: Hypertext Transfer Protocol -- HTTP/1.1
				</a></li>
				<li>2014-06: HTTP Caching is published as a separate document during the rewrite, <a href="https://httpwg.org/specs/rfc7234.html">RFC 7234</a></li>
				<li>2020-06: HTTP Caching is updated as part of a new cluster in <a href="https://www.rfc-editor.org/rfc/rfc9111.html">RFC 9111</a></li>
			</ol>

			<h2>See also</h2>
			<ul>
				<li><a href="https://www.rfc-editor.org/rfc/rfc9111.html">RFC 9111: HTTP Caching</a></li>
				<li><a href="https://cache-tests.fyi/">HTTP Caching Tests</a></li>
				<li><a href="https://www.mnot.net/cache_docs/">Caching Tutorial by Mark Nottingham (HTTP WG chair)</a></li>
				<li><a href="https://redbot.org/">REDbot: linter for HTTP resources</a></li>
			</ul>
		</main>
	</body>
</html>
